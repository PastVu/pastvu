name: Docker Image CI

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - '**'
    tags:
      - 'v*'
  workflow_dispatch:


jobs:

  build-and-push-app:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v2

      - name: Docker meta
        id: docker_meta_app
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: pastvu/pastvu
          tag-semver: |
            {{version}}
            {{major}}.{{minor}}      

      - name: Docker meta
        id: docker_meta_frontend
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: pastvu/frontend
          tag-semver: |
            {{version}}
            {{major}}.{{minor}}      

      - name: Split tag
        uses: xom9ikk/split@v1
        id: split
        with:
          string: ${{ steps.docker_meta_frontend.outputs.tags }}
          separator: '\n'
          limit: 1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push app
        id: docker_build_app
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ steps.docker_meta_app.outputs.tags }}
          labels: ${{ steps.docker_meta_app.outputs.labels }}
          push: true

      - name: Build and push frontend
        id: docker_build_frontend
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./frontend.Dockerfile
          build-args: |
            IMAGE=${{ steps.split.outputs._0 }}
          tags: ${{ steps.docker_meta_frontend.outputs.tags }}
          labels: ${{ steps.docker_meta_frontend.outputs.labels }}
          push: true

      - name: Image digest
        run: |
          echo ${{ steps.docker_build_app.outputs.digest }}
          echo ${{ steps.docker_build_frontend.outputs.digest }}
